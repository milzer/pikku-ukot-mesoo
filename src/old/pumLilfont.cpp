#include "pumLilfont.h"

unsigned char szLilFontData[1280] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, /* The first 32 characters that we don't have to show */

    0, 0, 0, 0, 0,   /* Space */
    1, 1, 1, 0, 1,   /* ! */
    5, 5, 0, 0, 0,   /* " */
    0, 0, 0, 0, 0,   /* # */
    14, 5, 6, 12, 7, /* $ (not a very good one, but hey, change it if you can think a better one ) */
    0, 9, 4, 2, 9,   /* % */
    2, 5, 14, 9, 6,  /* & */
    4, 2, 0, 0, 0,   /* ' */
    4, 2, 2, 2, 4,   /* ( */
    2, 4, 4, 4, 2,   /* ) */
    0, 0, 0, 0, 0,   /* * */
    0, 2, 7, 2, 0,   /* + */
    0, 0, 0, 4, 2,   /* , */
    0, 0, 15, 0, 0,  /* - */
    0, 0, 0, 0, 2,   /* . */
    0, 8, 4, 2, 1,   /* / */

    6, 9, 9, 9, 6,   /* 0 */
    4, 6, 4, 4, 4,   /* 1 */
    7, 8, 6, 1, 15,  /* 2 */
    7, 8, 6, 8, 7,   /* 3 */
    9, 9, 14, 8, 8,  /* 4 */
    15, 1, 7, 8, 7,  /* 5 */
    6, 1, 7, 9, 6,   /* 6 */
    15, 8, 12, 8, 8, /* 7 */
    6, 9, 6, 9, 6,   /* 8 */
    6, 9, 14, 8, 6,  /* 9 */
    0, 4, 0, 4, 0,   /* : */
    0, 4, 0, 4, 2,   /* ; */
    4, 2, 1, 2, 4,   /* < */
    0, 15, 0, 15, 0, /* = */
    2, 4, 8, 4, 2,   /* > */
    3, 4, 2, 0, 2,   /* ? */

    15, 15, 15, 15, 15,  /* @ */
    6, 9, 9, 15, 9,  /* A */
    7, 9, 7, 9, 7,   /* B */
    14, 1, 1, 1, 14, /* C */
    7, 9, 9, 9, 7,   /* D */
    15, 1, 7, 1, 15, /* E */
    15, 1, 7, 1, 1,  /* F */
    14, 1, 13, 9, 14,/* G */
    9, 9, 15, 9, 9,  /* H */
    15, 2, 2, 2, 15, /* I */
    8, 8, 8, 9, 6,   /* J */
    9, 9, 7, 9, 9,   /* K */
    1, 1, 1, 1, 15,  /* L */
    7, 11, 11, 9, 9, /* M */
    7, 9, 9, 9, 9,   /* N */
    6, 9, 9, 9, 6,   /* O */

    7, 9, 7, 1, 1,   /* P */
    6, 9, 9, 13, 14, /* Q */
    7, 9, 7, 9, 9,   /* R */
    14, 1, 6, 8, 7,  /* S */
    15, 2, 2, 2, 2,  /* T */
    9, 9, 9, 9, 6,   /* U */
    9, 9, 10, 10, 12,/* V */
    9, 9, 13, 13, 14,/* W */
    9, 9, 6, 9, 9,   /* X */
    9, 9, 14, 8, 7,  /* Y */
    15, 8, 6, 1, 15, /* Z */
    6, 2, 2, 2, 6,   /* [ */
    0, 1, 2, 4, 8,   /* \ */
    6, 4, 4, 4, 6,   /* ] */
    0, 0, 0, 0, 0,   /* ^ */
    0, 0, 0, 0, 15,  /* _ */

    4, 2, 0, 0, 0,   /* ' */
    0, 14, 9, 9, 14, /* a */
    1, 7, 9, 9, 7,   /* b */
    0, 14, 1, 1, 14, /* c */
    8, 14, 9, 9, 14, /* d */
    0, 6, 9, 7, 14,  /* e */
    4, 2, 7, 2, 2,   /* f */
    0, 14, 9, 14, 7, /* g */
    1, 7, 9, 9, 9,   /* h */
    2, 0, 2, 2, 7,   /* i */
    4, 0, 4, 5, 2,   /* j */
    1, 9, 7, 9, 9,   /* k */
    3, 2, 2, 2, 7,   /* l */
    0, 7, 11, 11, 9, /* m */
    0, 7, 9, 9, 9,   /* n */
    0, 6, 9, 9, 6,   /* o */

    0, 7, 9, 7, 1,   /* p */
    0, 14, 9, 14, 8, /* q */
    0, 14, 1, 1, 1,  /* r */
    0, 14, 3, 12, 7, /* s */
    2, 7, 2, 2, 12,  /* t */
    0, 9, 9, 9, 14,  /* u */
    0, 9, 9, 10, 4,  /* v */
    0, 9, 13, 13, 14,/* w */
    0, 9, 6, 6, 9,   /* x */
    0, 9, 14, 8, 7,  /* y */
    0, 15, 4, 2, 15, /* z */
    4, 2, 3, 2, 4,   /* <- */
    2, 2, 2, 2, 2,   /* | */
    2, 4, 12, 4, 2,  /* -> */
    0, 0, 0, 0, 0,   /* ~ */
    0, 0, 0, 0, 0,   /*  */
    0, 0, 0, 0, 0, /* From here on are characters that are not used (scandinavian etc.) */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    9, 0, 14, 9, 14,  /* � */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    9, 0, 6, 9, 6, /* � */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void LilChar(int x, int y, char c, DWORD col, DWORD* pSrf)
{
    if (y > ScreenHeight - 1)
    {
        return;
    }
    if (y < -3)
    {
        return;
    }
    if (x > ScreenWidth - 1)
    {
        return;
    }
    if (x < -3)
    {
        return;
    }

    int i;
    char tmp;

    for (i = 0; i < 5; i++)
    {
        tmp = szLilFontData[c * 5 + i];
        if ((tmp & 1) == 1 && _OnScreen(x, y + i))
        {
            pSrf[(y + i) * ScreenWidth + x] = col;
        }
        if ((tmp & 2) == 2 && _OnScreen(x + 1, y + i))
        {
            pSrf[(y + i) * ScreenWidth + (x + 1)] = col;
        }
        if ((tmp & 4) == 4 && _OnScreen(x + 2, y + i))
        {
            pSrf[(y + i) * ScreenWidth + (x + 2)] = col;
        }
        if ((tmp & 8) == 8 && _OnScreen(x + 3, y + i))
        {
            pSrf[(y + i) * ScreenWidth + (x + 3)] = col;
        }
    }

}

void LilStringCentered(int x, int y, char* s, DWORD col, DWORD* pSrf)
{
    int i, l;

    l = strlen(s);

    x -= (l * 5 / 2);

    for (i = 0; i < l; i++)
    {
        LilChar(x + (i * 5), y, *s++, col, pSrf);
    }
}

void LilString(int x, int y, char* s, DWORD col, DWORD* pSrf)
{
    int i, l;

    l = strlen(s);

    for (i = 0; i < l; i++)
    {
        LilChar(x + (i * 5), y, *s++, col, pSrf);
    }
}

void LilStringR(int x, int y, char* s, DWORD col, DWORD* pSrf)
{
    int i, l;

    l = strlen(s);

    x -= l * 5;

    for (i = 0; i < l; i++)
    {
        LilChar(x + (i * 5), y, *s++, col, pSrf);
    }
}

void LilStringCenterX(int y, char* s, DWORD col, DWORD* pSrf)
{
    int i, l, x;

    l = strlen(s);
    x = 160 - (l * 5 / 2);

    for (i = 0; i < l; i++)
    {
        LilChar(x + (i * 5), y, *s++, col, pSrf);
    }
}

void LilStringCenterXo(int y, char* s, DWORD col, DWORD* pSrf)
{
    int l, x;

    l = strlen(s);
    x = 160 - (l * 5 / 2);

    LilString(x - 1, y - 1, s, 0, pSrf);
    LilString(x - 1, y, s, 0, pSrf);
    LilString(x - 1, y + 1, s, 0, pSrf);
    LilString(x, y - 1, s, 0, pSrf);
    LilString(x, y + 1, s, 0, pSrf);
    LilString(x + 1, y - 1, s, 0, pSrf);
    LilString(x + 1, y, s, 0, pSrf);
    LilString(x + 1, y + 1, s, 0, pSrf);
    LilString(x, y, s, col, pSrf);
}
